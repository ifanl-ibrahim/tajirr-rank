import { serve } from "https://deno.land/std@0.177.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

console.log("üü¢ Lancement de la fonction abonnement-cron");

serve(async (req) => {
  const supabase = createClient(
    Deno.env.get("SUPABASE_URL")!,
    Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!
  );

  // √âtape 1 : R√©cup√©rer les abonn√©s
  const { data: abonn√©s, error: abonError } = await supabase
    .from("profiles")
    .select("*")
    .not("abonnement_id", "is", null);

  if (abonError) {
    console.error("‚ùå Erreur en r√©cup√©rant les profils abonn√©s :", abonError);
    return new Response(JSON.stringify({ success: false, error: abonError }), {
      status: 500,
    });
  }

  console.log(`‚úÖ ${abonn√©s.length} abonn√©s trouv√©s.`);

  // √âtape 2 : R√©cup√©rer les infos d'abonnements
  const { data: abonnements, error: aboError } = await supabase
    .from("abonnements")
    .select("*");

  if (aboError) {
    console.error("‚ùå Erreur en r√©cup√©rant les abonnements :", aboError);
    return new Response(JSON.stringify({ success: false, error: aboError }), {
      status: 500,
    });
  }

  const abonnementMap = Object.fromEntries(
    abonnements.map((a) => [a.id, a.points_mensuels])
  );

  // √âtape 3 : Mettre √† jour les points pour chaque abonn√©
  for (const user of abonn√©s) {
    console.log('üßæ Traitement utilisateur :', user.id);
    console.log('‚û°Ô∏è abonnement_id :', user.abonnement_id);

    const { data: abonnement, error: abonnementError } = await supabase
      .from("abonnements")
      .select("*")
      .eq("id", user.abonnement_id)
      .single();

    if (abonnementError || !abonnement) {
      console.error(`‚ö†Ô∏è Aucun abonnement correspondant trouv√© pour l'utilisateur ${user.id}`);
      continue;
    }

    console.log(`‚úÖ Abonnement trouv√© pour ${user.id} : ${abonnement.nom} (${abonnement.points_mensuels} points)`);

    const points = abonnement.points_mensuels;
    const newDepot = (user.total_depot || 0) + points;
    console.log(`üîÅ Utilisateur ${user.id} : ajout de ${points} points. Nouveau total = ${newDepot}`);

    const { error: updateError } = await supabase
      .from("profiles")
      .update({ total_depot: newDepot })
      .eq("id", user.id);

    if (updateError) {
      console.error(`‚ùå Erreur en mettant √† jour l'utilisateur ${user.id} :`, updateError);
    }
  }

  console.log("‚úÖ Fin de la fonction : mise √† jour des abonn√©s termin√©e.");
  return new Response(JSON.stringify({ success: true }), { status: 200 });
});
